-- PEMS Schema
-- Random Sampling:
--		http://stackoverflow.com/questions/8674718/best-way-to-select-random-rows-postgresql/8675160#8675160
--		http://dba.stackexchange.com/questions/96610/sampling-in-postgresql

-- Sunrise/Sunset:
--		https://en.wikipedia.org/wiki/Sunrise_equation
--		https://pypi.python.org/pypi/astral
--		http://michelanders.blogspot.ru/2010/12/calulating-sunrise-and-sunset-in-python.html
--		http://rhodesmill.org/pyephem/
--		https://github.com/mikereedell/sunrisesunsetlib-java
DELETE DATABASE dse_traffic;
DROP DATABASE dse_traffic;
CREATE DATABASE dse_traffic as perm=6e10 /*55GB */;

DATABASE dse_traffic;

-- Phase 0
CREATE TABLE District (
	ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
	NAME VARCHAR(500) NOT NULL
)
UNIQUE PRIMARY INDEX(ID);

INSERT INTO District VALUES (1 , 'Northwest');
INSERT INTO District VALUES (2 , 'Northeast');
INSERT INTO District VALUES (3 , 'North Central');
INSERT INTO District VALUES (4 , 'Bay Area');
INSERT INTO District VALUES (5 , 'Central Coast');
INSERT INTO District VALUES (6 , 'South Central');
INSERT INTO District VALUES (7 , 'LA/Ventura');
INSERT INTO District VALUES (8 , 'San Bernardino/Riverside');
INSERT INTO District VALUES (9 , 'Eastern Sierra');
INSERT INTO District VALUES (10, 'Central');
INSERT INTO District VALUES (11, 'San Diego/Imperial');
INSERT INTO District VALUES (12, 'Orange County');

CREATE TABLE ST_Type (
	ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
	"Type" VARCHAR(500) NOT NULL,
	Description VARCHAR(500) NOT NULL
)
UNIQUE PRIMARY INDEX(ID);

INSERT INTO ST_Type VALUES (1 ,'CD', 'Coll/Dist');
INSERT INTO ST_Type VALUES (2 ,'CH', 'Conventional Highway');
INSERT INTO ST_Type VALUES (3 ,'FF', 'Fwy-Fwy connector');
INSERT INTO ST_Type VALUES (4 ,'FR', 'Off Ramp');
INSERT INTO ST_Type VALUES (5 ,'HV', 'HOV');
INSERT INTO ST_Type VALUES (6 ,'ML', 'Mainline');
INSERT INTO ST_Type VALUES (7 ,'OR', 'On Ramp');

CREATE TABLE Freeways (
	ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
	Num INTEGER NOT NULL,
	Direction VARCHAR(500) NOT NULL
)
UNIQUE PRIMARY INDEX(ID);

CREATE INDEX Fwy_Num_Dir(Num, Direction) ON Freeways;

CREATE TABLE County_City (
	ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
	County_FIPS_ID INTEGER NOT NULL,
	City_FIPS_ID INTEGER
)
UNIQUE PRIMARY INDEX(ID);

-- Phase 1
CREATE TABLE Traffic_Station (
	ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
	PEMS_ID INTEGER,
	Effective_Start Date NOT NULL,
	Effective_End Date,
	Name VARCHAR(500),
	Fwy_ID INTEGER NOT NULL REFERENCES Freeways(ID),
	CCID_ID INTEGER NOT NULL REFERENCES County_City(ID),
	District_ID INTEGER NOT NULL REFERENCES District(ID),
	State_PM FLOAT NOT NULL,
	ABS_PM FLOAT NOT NULL,
	Latitude FLOAT NOT NULL,
	Longitude FLOAT NOT NULL,
	Location ST_Geometry NOT NULL,
	Length FLOAT,
	Type_ID INTEGER NOT NULL REFERENCES ST_Type(ID),
	Num_Lanes INTEGER NOT NULL
	-- USER_ID DELETE
)
UNIQUE PRIMARY INDEX(ID);

-- Phase 2
CREATE TABLE Observation (
	ID BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
	"Time" Timestamp NOT NULL,
	Station_ID INTEGER NOT NULL REFERENCES Traffic_Station(ID),
	Samples INTEGER,
	Perc_Observed FLOAT,
	Total_Flow INTEGER,
	Avg_Occupancy FLOAT,
	Avg_Speed FLOAT
)
UNIQUE PRIMARY INDEX(ID);

-- Phase 3
CREATE TABLE Lane_Observation (
	Observation_ID BIGINT NOT NULL REFERENCES Observation(ID),
	Station_ID INTEGER NOT NULL REFERENCES Traffic_Station(ID),
	L_Num INTEGER NOT NULL,
	Samples INTEGER,
	Flow INTEGER,
	Occupancy FLOAT,
	Speed FLOAT,
	Obs_Flag SMALLINT
)
UNIQUE PRIMARY INDEX (Observation_ID, Station_ID, L_Num);

CREATE INDEX L_Obos_SecIdx(Station_ID, L_Num) ON Lane_Observation;

CREATE TABLE CHP_Desc (
	ID VARCHAR(500) NOT NULL,
	Description VARCHAR(500)
)
UNIQUE PRIMARY INDEX(ID);

-- CHP Data
CREATE TABLE CHP_INC (
	ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
	CC_CODE VARCHAR(500),
	INC_NUM INTEGER,
	"Time" Timestamp NOT NULLÃ’,
	Desc_ID VARCHAR(500) NOT NULL REFERENCES CHP_Desc(ID),
	-- Location DELETE
	-- Area DELETE
	-- Zoom_Map DELETE
	-- TB_XY DELETE
	Latitude FLOAT NOT NULL,
	Longitude FLOAT NOT NULL,
	Location ST_Geometry NOT NULL,
	District_ID INTEGER NOT NULL REFERENCES District(ID),
	CC_ID INTEGER NOT NULL REFERENCES County_City(ID),
	Fwy_ID INTEGER NOT NULL REFERENCES Freeways(ID),
	State_PM FLOAT,
	ABS_PM FLOAT NOT NULL,
	Severity VARCHAR(500),
	Duration INTEGER
)
UNIQUE PRIMARY INDEX(ID);

-- Weather Data
CREATE TABLE Weather_Station (
	ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
	Name VARCHAR(500) NOT NULL,
	Latitude FLOAT NOT NULL,
	Longitude FLOAT NOT NULL,
	Location ST_Geometry NOT NULL,
	Elevation FLOAT NOT NULL
	--CCID_ID INTEGER NOT NULL REFERENCES County_City(ID)
)
UNIQUE PRIMARY INDEX(ID);

CREATE TABLE Precipitation_Hourly_Observation (
	ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
	Station_ID INTEGER NOT NULL REFERENCES Weather_Station(ID),
	End_Hour Timestamp NOT NULL,
	Amount FLOAT NOT NULL
)
UNIQUE PRIMARY INDEX(ID);

CREATE TABLE Precipitation_Daily_Total (
	ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
	Station_ID INTEGER NOT NULL REFERENCES Weather_Station(ID),
	"Day" Date NOT NULL,
	Amount FLOAT NOT NULL
)
UNIQUE PRIMARY INDEX(ID);

/*
CREATE OR REPLACE FUNCTION LocationTrigger()
RETURNS trigger
AS $loc_upd$
	DECLARE
		ins_txt VARCHAR(500);
	BEGIN
		ins_txt := format('SRID=4326;POINT(%s %s)', NEW.Longitude, NEW.Latitude);
		NEW.Location = ST_GeographyFromVARCHAR(500)(ins_txt);

	RETURN NEW;

	EXCEPTION
	    WHEN data_exception THEN
	        RAISE EXCEPTION 'Trigger ERROR [DATA EXCEPTION] - SQLSTATE: %, SQLERRM: %',SQLSTATE,SQLERRM;
	        RETURN NULL;
	    WHEN unique_violation THEN
	        RAISE EXCEPTION 'Trigger ERROR [UNIQUE] - SQLSTATE: %, SQLERRM: %',SQLSTATE,SQLERRM;
	        RETURN NULL;
	    WHEN OTHERS THEN
	        RAISE EXCEPTION 'Trigger ERROR [OTHER] - SQLSTATE: %, SQLERRM: %',SQLSTATE,SQLERRM;
	        RETURN NULL;
END;
$loc_upd$
LANGUAGE plpgsql;

CREATE TRIGGER InsLoc BEFORE INSERT ON Traffic_Station FOR EACH ROW EXECUTE PROCEDURE LocationTrigger();
CREATE TRIGGER InsLoc BEFORE INSERT ON CHP_INC FOR EACH ROW EXECUTE PROCEDURE LocationTrigger();
CREATE TRIGGER InsLoc BEFORE INSERT ON Weather_Station FOR EACH ROW EXECUTE PROCEDURE LocationTrigger();

REPLACE PROCEDURE LocationTrigger(IN Lat FLOAT, IN Long FLOAT, OUT Loc ST_Geometry)
BEGIN
    Loc := 'POINT(' || Long || ' ' || Lat || ')'
END;
*/

REPLACE TRIGGER Station_Loc
    BEFORE INSERT ON Traffic_Station
    REFERENCING NEW ROW AS new_row
    FOR EACH ROW
    SET new_row.Location = 'POINT(' || new_row.Longitude || ' ' || new_row.Latitude || ')';

REPLACE TRIGGER CHP_Loc
    BEFORE INSERT ON CHP_INC
    REFERENCING NEW ROW AS new_row
    FOR EACH ROW
    SET new_row.Location = 'POINT(' || new_row.Longitude || ' ' || new_row.Latitude || ')';

REPLACE TRIGGER WStation_Loc
    BEFORE INSERT ON Weather_Station
    REFERENCING NEW ROW AS new_row
    FOR EACH ROW
    SET new_row.Location = 'POINT(' || new_row.Longitude || ' ' || new_row.Latitude || ')';
